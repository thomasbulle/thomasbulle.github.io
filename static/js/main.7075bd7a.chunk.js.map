{"version":3,"sources":["IntlProviderWrapper.js","store/actions/actionsTypes.js","store/reducers/cart.js","enums/commons.js","store/reducers/app.js","store/reducers/index.js","store/actions/cart.js","store/actions/app.js","helpers/cart.js","helpers/app.js","store/listener/cart.js","store/listener/index.js","config/config.js","containers/ManageItemQuantity/ManageItemQuantity.js","containers/CartPopover/CartPopover.js","containers/Header/Header.js","components/CardItem/CardItem.js","components/SearchForm/SearchForm.js","components/Loader/Loader.js","containers/Home/Home.js","containers/ItemDetail/ItemDetail.js","containers/CartItemsTable/CartItemsTable.js","containers/Cart/Cart.js","App.js","index.js"],"names":["messages","connect","state","locale","app","children","ADD_ITEM_TO_CART","UPDATE_ITEM","initialState","items","total","applicatedOffer","cart","action","type","item","quantity","slice","index","operationsEnum","Object","freeze","LESS","ADD","componentsEnum","HOME","ITEM_DETAIL","screenSizesEnum","XS","S","M","screenSize","homePosition","x","y","allReducers","combineReducers","lastAction","updateItem","addAllBooks","updateLocale","includes","toUpperCase","updateScreenSize","updateItemQuantity","operation","updatedItem","JSON","parse","stringify","checkIfItemIsAlreadyAdded","findIndex","element","title","canLessItemQuantity","getItemByTitle","itemsInCart","find","getPriceByPercentage","price","percentage","getPriceByMinus","minus","getPriceBySlice","sliceValue","value","nbReduc","Math","floor","newPrice","i","getTotalNbrOfItemsInCart","nbr","forEach","addAndUpdateItemToCart","dispatch","addItemToCart","addCartInLocalStorage","localStorage","setItem","calculateCartTotal","newTotal","length","url","isbn","axios","get","substring","then","res","bestOffer","offers","totalsByOffers","offer","push","priceWithOffer","sort","a","b","getBestOffer","data","catch","err","console","log","store","locales","responsiveSizes","xs","s","m","cartItemsTable","columns","desktop","mobile","ManageItemQuantity","Component","handleClickAddItem","this","handleClickRemoveItem","props","render","className","Group","compact","disabled","onClick","icon","MinusOutlined","style","width","size","PlusOutlined","cartTotal","handleClickSeeCart","map","key","src","cover","alt","description","id","image","Empty","PRESENTED_IMAGE_SIMPLE","to","Header","constructor","super","isOpenPopoverCart","getClassNameShopCart","intl","config","formatMessage","border","visible","content","setState","trigger","placement","onVisibleChange","count","injectIntl","CardItem","canSeeMore","isOpenCover","componentDidMount","parent","getClassNameByParent","truncateSynopsis","synopsis","join","text","subString","substr","lastIndexOf","handleClickAddToCart","ZoomInOutlined","dangerouslySetInnerHTML","__html","Fragment","allowHalf","defaultValue","rate","comments","mainSrc","onCloseRequest","imageTitle","Search","Input","SearchForm","handleSearch","getFilteredItems","filter","toLowerCase","placeholder","allowClear","onSearch","onChange","e","target","Loader","Home","filteredItems","window","scrollTo","componentDidUpdate","prevProps","componentWillUnmount","scrollY","ItemDetail","match","params","history","LeftOutlined","CartItemsTable","itemName","removeItemInCart","getColumns","columnTitle","column","dataIndex","record","getMobileDescription","name","danger","DeleteOutlined","getDataSource","getTableFooter","calculateTotalWithoutOffer","getApplicatedOfferText","values","dataSource","pagination","footer","filterConfirm","filterReset","emptyText","Cart","validatedCommand","handleClickValidate","message","loading","success","withRouter","App","addEventListener","getScreenSize","navigator","language","random","ceil","error","storageCart","getItem","info","innerWidth","path","createStore","__REDUX_DEVTOOLS_EXTENSION__","f","subscribe","getState","listener","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.7075bd7a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { IntlProvider } from \"react-intl\";\r\nimport messages_fr from \"./translations/fr.json\";\r\nimport messages_en from \"./translations/en.json\";\r\n\r\nconst messages = {\r\n  \"fr-FR\": messages_fr,\r\n  \"en-EN\": messages_en\r\n};\r\n\r\nconst IntlProviderWrapper = ({ children, locale }) => (\r\n  <IntlProvider locale={locale} messages={messages[locale]}>\r\n    {children}\r\n  </IntlProvider>\r\n);\r\n\r\nIntlProviderWrapper.propTypes = {\r\n  children: PropTypes.node,\r\n  locale: PropTypes.string\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  locale: state.app.locale\r\n});\r\n\r\nexport default connect(mapStateToProps)(IntlProviderWrapper);\r\n","// Cart\r\nexport const ADD_ITEM_TO_CART = \"ADD_ITEM_TO_CART\";\r\nexport const UPDATE_ITEM = \"UPDATE_ITEM\";\r\nexport const UPDATE_CART_TOTAL = \"UPDATE_CART_TOTAL\";\r\nexport const REMOVE_ITEM_IN_CART = \"REMOVE_ITEM_IN_CART\";\r\nexport const UPDATE_APPLICATED_OFFER = \"UPDATE_APPLICATED_OFFER\";\r\nexport const RESET_CART_TOTAL = \"RESET_CART_TOTAL\";\r\nexport const INJECT_CART = \"INJECT_CART\";\r\nexport const RESET_CART = \"RESET_CART\";\r\n\r\n// App\r\nexport const ADD_ALL_ITEMS = \"ADD_ALL_ITEMS\";\r\nexport const UPDATE_LOCALE = \"UPDATE_LOCALE\";\r\nexport const UPDATE_SCREEN_SIZE = \"UPDATE_SCREEN_SIZE\";\r\nexport const UPDATE_HOME_POSITION = \"UPDATE_HOME_POSITION\";\r\n","import {\r\n  ADD_ITEM_TO_CART,\r\n  UPDATE_ITEM,\r\n  UPDATE_CART_TOTAL,\r\n  REMOVE_ITEM_IN_CART,\r\n  UPDATE_APPLICATED_OFFER,\r\n  RESET_CART_TOTAL,\r\n  INJECT_CART,\r\n  RESET_CART\r\n} from \"store/actions/actionsTypes\";\r\n\r\nconst initialState = {\r\n  items: [],\r\n  total: 0,\r\n  applicatedOffer: null\r\n};\r\n\r\nconst cart = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_ITEM_TO_CART:\r\n      return {\r\n        ...state,\r\n        items: [\r\n          ...state.items,\r\n          {\r\n            ...action.item,\r\n            quantity: 1\r\n          }\r\n        ]\r\n      };\r\n\r\n    case UPDATE_ITEM:\r\n      return {\r\n        ...state,\r\n        items: [\r\n          ...state.items.slice(0, action.index),\r\n          action.item,\r\n          ...state.items.slice(action.index + 1)\r\n        ]\r\n      };\r\n\r\n    case UPDATE_CART_TOTAL:\r\n      return {\r\n        ...state,\r\n        total: action.total\r\n      };\r\n\r\n    case REMOVE_ITEM_IN_CART:\r\n      return {\r\n        ...state,\r\n        items: [\r\n          ...state.items.slice(0, action.index),\r\n          ...state.items.slice(action.index + 1)\r\n        ]\r\n      };\r\n\r\n    case UPDATE_APPLICATED_OFFER:\r\n      return {\r\n        ...state,\r\n        applicatedOffer: action.applicatedOffer\r\n      };\r\n\r\n    case RESET_CART_TOTAL:\r\n      return {\r\n        ...state,\r\n        total: 0,\r\n        applicatedOffer: null\r\n      };\r\n\r\n    case INJECT_CART:\r\n      return {\r\n        ...state,\r\n        items: action.cart\r\n      };\r\n\r\n    case RESET_CART:\r\n      return {\r\n        ...state,\r\n        items: [],\r\n        total: 0,\r\n        applicatedOffer: null\r\n      }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default cart;\r\n","export const operationsEnum = Object.freeze({ LESS: 0, ADD: 1 });\r\n\r\nexport const componentsEnum = Object.freeze({ HOME: 0, ITEM_DETAIL: 1 });\r\n\r\nexport const screenSizesEnum = Object.freeze({ XS: 0, S: 1, M: 2 });\r\n","import {\r\n  ADD_ALL_ITEMS,\r\n  UPDATE_LOCALE,\r\n  UPDATE_SCREEN_SIZE,\r\n  UPDATE_HOME_POSITION\r\n} from \"store/actions/actionsTypes\";\r\n\r\n// Enums\r\nimport { screenSizesEnum } from \"enums\";\r\n\r\nconst initialState = {\r\n  locale: \"fr-FR\",\r\n  items: [],\r\n  screenSize: screenSizesEnum.M,\r\n  homePosition: { x: 0, y: 0 }\r\n};\r\n\r\nconst app = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_ALL_ITEMS:\r\n      return {\r\n        ...state,\r\n        items: action.items\r\n      };\r\n\r\n    case UPDATE_LOCALE:\r\n      return {\r\n        ...state,\r\n        locale: action.locale\r\n      };\r\n\r\n    case UPDATE_SCREEN_SIZE:\r\n      return {\r\n        ...state,\r\n        screenSize: action.screenSize\r\n      };\r\n\r\n    case UPDATE_HOME_POSITION:\r\n      return {\r\n        ...state,\r\n        homePosition: {\r\n          x: action.x,\r\n          y: action.y\r\n        }\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default app;\r\n","import { combineReducers } from \"redux\";\r\n\r\n// Reducers\r\nimport cart from \"./cart\";\r\nimport app from \"./app\";\r\n\r\n// Small reducer to store the last action\r\nfunction lastAction(state = null, action) {\r\n  return action;\r\n}\r\n\r\nconst allReducers = combineReducers({\r\n  cart,\r\n  app,\r\n  lastAction\r\n});\r\n\r\nexport default allReducers;\r\n","// ActionsTypes\r\nimport {\r\n  ADD_ITEM_TO_CART,\r\n  UPDATE_ITEM,\r\n  UPDATE_CART_TOTAL,\r\n  REMOVE_ITEM_IN_CART,\r\n  UPDATE_APPLICATED_OFFER,\r\n  RESET_CART_TOTAL,\r\n  INJECT_CART,\r\n  RESET_CART\r\n} from \"store/actions/actionsTypes\";\r\n\r\nexport const addItemToCart = (item) => ({\r\n  type: ADD_ITEM_TO_CART,\r\n  item\r\n});\r\n\r\nexport const updateItem = (item, index) => ({\r\n  type: UPDATE_ITEM,\r\n  item,\r\n  index\r\n});\r\n\r\nexport const updateCartTotal = (total) => ({\r\n  type: UPDATE_CART_TOTAL,\r\n  total\r\n});\r\n\r\nexport const removeItemInCart = (index) => ({\r\n  type: REMOVE_ITEM_IN_CART,\r\n  index\r\n});\r\n\r\nexport const updateApplicatedOffer = (applicatedOffer) => ({\r\n  type: UPDATE_APPLICATED_OFFER,\r\n  applicatedOffer\r\n});\r\n\r\nexport const resetCartTotal = () => ({\r\n  type: RESET_CART_TOTAL\r\n});\r\n\r\nexport const injectCart = (cart) => ({\r\n  type: INJECT_CART,\r\n  cart\r\n});\r\n\r\nexport const resetCart = () => ({\r\n  type: RESET_CART\r\n});\r\n","// ActionsTypes\r\nimport {\r\n  ADD_ALL_ITEMS,\r\n  UPDATE_LOCALE,\r\n  UPDATE_SCREEN_SIZE,\r\n  UPDATE_HOME_POSITION\r\n} from \"store/actions/actionsTypes\";\r\n\r\nexport const addAllBooks = (items) => ({\r\n  type: ADD_ALL_ITEMS,\r\n  items\r\n});\r\n\r\nexport const updateLocale = (locale) => ({\r\n  type: UPDATE_LOCALE,\r\n  locale: locale.includes(\"-\") ? locale : `${locale}-${locale.toUpperCase()}`\r\n});\r\n\r\nexport const updateScreenSize = (screenSize) => ({\r\n  type: UPDATE_SCREEN_SIZE,\r\n  screenSize\r\n});\r\n\r\nexport const updateHomePosition = (x, y) => ({\r\n  type: UPDATE_HOME_POSITION,\r\n  x,\r\n  y\r\n});\r\n","// Enums\r\nimport { operationsEnum } from \"enums\";\r\n\r\n// Actions\r\nimport { updateItem, addItemToCart } from \"store/actions\";\r\n\r\n/**\r\n * To update the iten quantity in the store\r\n * @param {Object} item\r\n * @param {operationsEnum} operation\r\n */\r\nexport const updateItemQuantity = (item, operation) => {\r\n  // Copy the item object to modify it\r\n  let updatedItem = JSON.parse(JSON.stringify(item));\r\n\r\n  if (operation === operationsEnum.ADD) {\r\n    updatedItem = {\r\n      ...updatedItem,\r\n      quantity: updatedItem.quantity + 1\r\n    };\r\n  } else if (operation === operationsEnum.LESS) {\r\n    updatedItem = {\r\n      ...updatedItem,\r\n      quantity: updatedItem.quantity <= 0 ? 0 : updatedItem.quantity - 1\r\n    };\r\n  }\r\n\r\n  return updatedItem;\r\n};\r\n\r\n/**\r\n * To check if an item is already added in the store\r\n * @param {Array} items\r\n * @param {Object} item\r\n */\r\nexport const checkIfItemIsAlreadyAdded = (items, item) => {\r\n  const index = items.findIndex((element) => element.title === item.title);\r\n  return index > -1;\r\n};\r\n\r\n/**\r\n * To check if is it possible to remove 1 item in the quantity\r\n * It is possible just if the quantity is more than 1 item\r\n * @param {Object} item\r\n */\r\nexport const canLessItemQuantity = (item) => item.quantity > 1;\r\n\r\n/**\r\n * To find an item in the cart with the title item\r\n * @param {string} title\r\n * @param {Array} itemsInCart\r\n */\r\nexport const getItemByTitle = (title, itemsInCart) =>\r\n  itemsInCart.find((element) => element.title === title);\r\n\r\n/**\r\n * To calculate the best offer according to the items in the cart\r\n * @param {Object} offers\r\n * @param {number} total\r\n */\r\nexport const getBestOffer = (offers, total) => {\r\n  const totalsByOffers = [];\r\n\r\n  // Caclculate for each offer the total price after offer\r\n  offers.forEach((offer) => {\r\n    switch (offer.type) {\r\n      case \"percentage\":\r\n        totalsByOffers.push({\r\n          ...offer,\r\n          priceWithOffer: getPriceByPercentage(total, offer.value)\r\n        });\r\n        break;\r\n\r\n      case \"minus\":\r\n        totalsByOffers.push({\r\n          ...offer,\r\n          priceWithOffer: getPriceByMinus(total, offer.value)\r\n        });\r\n        break;\r\n\r\n      case \"slice\":\r\n        totalsByOffers.push({\r\n          ...offer,\r\n          priceWithOffer: getPriceBySlice(total, offer.sliceValue, offer.value)\r\n        });\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n\r\n  if (totalsByOffers.length) {\r\n    // Sort the array in ascending order and return the first item\r\n    return totalsByOffers.sort(\r\n      (a, b) => a.priceWithOffer - b.priceWithOffer\r\n    )[0];\r\n  } else {\r\n    return total;\r\n  }\r\n};\r\n\r\n/**\r\n * To calculate the price with the percentage offer\r\n * @param {number} price\r\n * @param {number} percentage\r\n */\r\nexport const getPriceByPercentage = (price, percentage) =>\r\n  price - (price * percentage) / 100;\r\n\r\n/**\r\n * To caclulate the price with the value to remove\r\n * @param {number} price\r\n * @param {number} minus\r\n */\r\nexport const getPriceByMinus = (price, minus) => price - minus;\r\n\r\n/**\r\n * To caclulate the price with the slice offer\r\n * @param {number} price\r\n * @param {number} sliceValue\r\n * @param {number} value\r\n */\r\nexport const getPriceBySlice = (price, sliceValue, value) => {\r\n  // Calculate the numbers of slices\r\n  const nbReduc = Math.floor(price / sliceValue);\r\n  let newPrice = price;\r\n\r\n  // Remove the value to the price for each slice\r\n  if (newPrice > 0) {\r\n    for (let i = 0; i > nbReduc; i++) {\r\n      newPrice = newPrice - value;\r\n    }\r\n  }\r\n\r\n  return newPrice;\r\n};\r\n\r\n/**\r\n * To get the total number of items added in the cart\r\n * @param {Array} itemsInCart\r\n */\r\nexport const getTotalNbrOfItemsInCart = (itemsInCart) => {\r\n  let nbr = 0;\r\n  itemsInCart.forEach((item) => (nbr = nbr + item.quantity));\r\n  return nbr;\r\n};\r\n\r\n/**\r\n * To add an item in the cart\r\n * @param {Function} dispatch\r\n * @param {Array} itemsInCart\r\n * @param {Object} item\r\n */\r\nexport const addAndUpdateItemToCart = (dispatch, itemsInCart, item) => {\r\n  // If the item is already added in the cart, just update this quantity\r\n  if (checkIfItemIsAlreadyAdded(itemsInCart, item)) {\r\n    // Find the item index in the cart\r\n    const index = itemsInCart.findIndex(\r\n      (element) => element.title === item.title\r\n    );\r\n    dispatch(\r\n      updateItem(\r\n        updateItemQuantity(itemsInCart[index], operationsEnum.ADD),\r\n        index\r\n      )\r\n    );\r\n  } else {\r\n    // If the item not already added in the cart, add it in the cart\r\n    dispatch(addItemToCart(item));\r\n  }\r\n};\r\n\r\n/**\r\n * To calculate the total price of the cart without offer\r\n * @param {Array} cart\r\n */\r\nexport const calculateTotalWithoutOffer = (cart) => {\r\n  let total = 0;\r\n  cart.forEach((item) => {\r\n    if (item.quantity > 1) {\r\n      for (let i = 0; i < item.quantity; i++) {\r\n        total += item.price;\r\n      }\r\n    } else {\r\n      total += item.price;\r\n    }\r\n  });\r\n  return total;\r\n};\r\n","/**\r\n * To add the cart in the localStorage\r\n * @param {Object} itemsInCart\r\n */\r\nexport const addCartInLocalStorage = (itemsInCart) => {\r\n  localStorage.setItem(\"cart\", JSON.stringify(itemsInCart));\r\n};\r\n","import axios from \"axios\";\r\n\r\n// Helpers\r\nimport { getBestOffer } from \"helpers\";\r\n\r\n// Actions\r\nimport {\r\n  updateCartTotal,\r\n  updateApplicatedOffer,\r\n  resetCartTotal\r\n} from \"store/actions\";\r\n\r\n/**\r\n * To calculate the cart total\r\n * @param {Function} dispatch\r\n * @param {Object} state\r\n */\r\nexport const calculateCartTotal = (dispatch, state) => {\r\n  let newTotal = 0;\r\n\r\n  if (state.cart.items.length === 0) {\r\n    dispatch(resetCartTotal());\r\n  } else {\r\n    let url = \"https://henri-potier.techx.fr/books/\";\r\n\r\n    // loop on each items in the cart and add his id in the url\r\n    state.cart.items.forEach((item) => {\r\n      for (let i = 0; i < item.quantity; i++) {\r\n        url += `${item.isbn},`;\r\n        newTotal += item.price;\r\n      }\r\n    });\r\n\r\n    // Request to get the offers according the items in the cart\r\n    axios\r\n      .get(`${url.substring(0, url.length - 1)}/commercialOffers`)\r\n      .then((res) => {\r\n        // Get the best offer in the response\r\n        const bestOffer = getBestOffer(res.data.offers, newTotal);\r\n\r\n        // Add the new price in the store with the best offer\r\n        dispatch(updateCartTotal(bestOffer.priceWithOffer));\r\n        // Add the best offer in the store\r\n        dispatch(updateApplicatedOffer(bestOffer));\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }\r\n};\r\n","// ActionsTypes\r\nimport {\r\n  ADD_ITEM_TO_CART,\r\n  UPDATE_ITEM,\r\n  REMOVE_ITEM_IN_CART,\r\n  INJECT_CART,\r\n  RESET_CART\r\n} from \"store/actions/actionsTypes\";\r\n\r\n// Helpers\r\nimport { addCartInLocalStorage } from \"helpers\";\r\n\r\n// Listeners\r\nimport { calculateCartTotal } from \"./cart\";\r\n\r\nexport default (store) => {\r\n  const state = store.getState();\r\n\r\n  switch (state.lastAction.type) {\r\n    case ADD_ITEM_TO_CART:\r\n    case UPDATE_ITEM:\r\n    case REMOVE_ITEM_IN_CART:\r\n    case INJECT_CART:\r\n      // If an item is added, removed or his quantity is updated, or a new cart is loaded,\r\n      // calculate the cart total and add it in the store, and add the new cart in the localStorage\r\n      calculateCartTotal(store.dispatch, state);\r\n      addCartInLocalStorage(state.cart.items);\r\n      break;\r\n\r\n    case RESET_CART:\r\n      addCartInLocalStorage(state.cart.items);\r\n      break;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export default {\r\n  app: {\r\n    locales: [\"fr\", \"en\"],\r\n    responsiveSizes: {\r\n      xs: 375,\r\n      s: 840,\r\n      m: 1200\r\n    }\r\n  },\r\n  cartItemsTable: {\r\n    columns: {\r\n      desktop: [\"name\", \"price\", \"quantity\", \"actions\"],\r\n      mobile: [\"description\"]\r\n    }\r\n  }\r\n};\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./styles.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport { Button, Input } from \"antd\";\r\nimport { PlusOutlined, MinusOutlined } from \"@ant-design/icons\";\r\n\r\n// Enums\r\nimport { operationsEnum, screenSizesEnum } from \"enums\";\r\n\r\n// Helpers\r\nimport { canLessItemQuantity, updateItemQuantity } from \"helpers\";\r\n\r\n// Actions\r\nimport { updateItem } from \"store/actions\";\r\n\r\nclass ManageItemQuantity extends Component {\r\n  /**\r\n   * To add an item in the store\r\n   */\r\n  handleClickAddItem() {\r\n    this.updateItem(operationsEnum.ADD);\r\n  }\r\n\r\n  /**\r\n   * To reduce by 1 the quantity of item in the cart\r\n   */\r\n  handleClickRemoveItem() {\r\n    this.updateItem(operationsEnum.LESS);\r\n  }\r\n\r\n  /**\r\n   * To update the quantity of an item in the cart\r\n   * @param {operationsEnum} operation\r\n   */\r\n  updateItem(operation) {\r\n    const { dispatch, itemsInCart, item } = this.props;\r\n\r\n    const index = itemsInCart.findIndex(\r\n      (element) => element.title === item.title\r\n    );\r\n\r\n    dispatch(\r\n      updateItem(updateItemQuantity(itemsInCart[index], operation), index)\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { item, className, screenSize } = this.props;\r\n\r\n    return (\r\n      <div className={`ManageItemQuantity-wrapper ${className}`}>\r\n        <Input.Group compact>\r\n          <Button\r\n            className=\"button-minus\"\r\n            disabled={!canLessItemQuantity(item)}\r\n            onClick={() => this.handleClickRemoveItem()}\r\n            icon={<MinusOutlined />}\r\n            style={{ width: \"33%\" }}\r\n            size={screenSize === screenSizesEnum.XS ? \"small\" : \"middle\"}\r\n          />\r\n          <Input\r\n            className=\"input-quantity\"\r\n            value={item.quantity}\r\n            disabled\r\n            style={{ width: \"33%\" }}\r\n            size={screenSize === screenSizesEnum.XS ? \"small\" : \"middle\"}\r\n          />\r\n          <Button\r\n            className=\"button-plus\"\r\n            onClick={() => this.handleClickAddItem()}\r\n            icon={<PlusOutlined />}\r\n            style={{ width: \"33%\" }}\r\n            size={screenSize === screenSizesEnum.XS ? \"small\" : \"middle\"}\r\n          />\r\n        </Input.Group>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nManageItemQuantity.propTypes = {\r\n  dispatch: PropTypes.func,\r\n  itemsInCart: PropTypes.array,\r\n  item: PropTypes.object,\r\n  className: PropTypes.string,\r\n  screenSize: PropTypes.number\r\n};\r\n\r\nconst mapStateToProps = ({ cart, app }) => ({\r\n  itemsInCart: cart.items,\r\n  screenSize: app.screenSize\r\n});\r\n\r\nexport default connect(mapStateToProps)(ManageItemQuantity);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./styles.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Empty } from \"antd\";\r\n\r\n// Containers\r\nimport ManageItemQuantity from \"containers/ManageItemQuantity/ManageItemQuantity\";\r\n\r\nconst CartPopover = ({ items, cartTotal, handleClickSeeCart }) => (\r\n  <div className=\"CartPopover-wrapper\">\r\n    <div className=\"cart-content-container\">\r\n      {items.length > 0 ? (\r\n        items.map((item, index) => (\r\n          <div className=\"item-detail-container\" key={index}>\r\n            <img className=\"cover-item-detail\" src={item.cover} alt={item.title} />\r\n            <div key={index} className=\"item-detail\">\r\n              <span className=\"item-title\">{item.title}</span>\r\n              <div className=\"price-quantity-container\">\r\n                <span className=\"single-price\">{item.price}&euro;</span>\r\n                <ManageItemQuantity\r\n                  className=\"quantity-container-popover\"\r\n                  item={item}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <Empty\r\n          description={<FormattedMessage id=\"cartPopover.emptyCart\" />}\r\n          image={Empty.PRESENTED_IMAGE_SIMPLE}\r\n        />\r\n      )}\r\n    </div>\r\n\r\n    <div className=\"footer-popover\">\r\n      <span className=\"total-price\">\r\n        <FormattedMessage id=\"cartPopover.footer.totalPrice\" />\r\n        &nbsp;:&nbsp;\r\n        {cartTotal}&euro;\r\n      </span>\r\n\r\n      <Link to=\"/cart\">\r\n        <Button onClick={() => handleClickSeeCart()}>\r\n          <FormattedMessage id=\"cartPopover.buttonSeeCart\" />\r\n        </Button>\r\n      </Link>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nCartPopover.propTypes = {\r\n  items: PropTypes.array,\r\n  cartTotal: PropTypes.number,\r\n  handleClickSeeCart: PropTypes.func\r\n};\r\n\r\nconst mapStateToProps = ({ cart }) => ({\r\n  items: cart.items,\r\n  cartTotal: cart.total\r\n});\r\n\r\nexport default connect(mapStateToProps)(CartPopover);\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./styles.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport { injectIntl, FormattedMessage } from \"react-intl\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Popover, Button, Badge } from \"antd\";\r\n\r\n// Config\r\nimport config from \"config/config\";\r\n\r\n// ActionsTypes\r\nimport { ADD_ITEM_TO_CART, UPDATE_ITEM } from \"store/actions/actionsTypes\";\r\n\r\n// Actions\r\nimport { updateLocale } from \"store/actions\";\r\n\r\n// Enums\r\nimport { screenSizesEnum } from \"enums\";\r\n\r\n// Helpers\r\nimport { getTotalNbrOfItemsInCart } from \"helpers\";\r\n\r\n// Containers\r\nimport CartPopover from \"containers/CartPopover/CartPopover.js\";\r\n\r\nclass Header extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isOpenPopoverCart: false\r\n    };\r\n  }\r\n\r\n  /**\r\n   * To return the good className to apply on the cart icon\r\n   * according to the lastAction called in the redux store\r\n   * @param {String} lastAction\r\n   */\r\n  getClassNameShopCart(lastAction) {\r\n    if ([ADD_ITEM_TO_CART, UPDATE_ITEM].includes(lastAction)) {\r\n      return \"animate\";\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { isOpenPopoverCart } = this.state;\r\n    const { dispatch, intl, itemsInCart, lastAction, screenSize } = this.props;\r\n\r\n    return (\r\n      <div className=\"Header-wrapper\">\r\n        <div className=\"locale-container\">\r\n          {config.app.locales.map((locale, index) => (\r\n            <span\r\n              key={index}\r\n              className={`locale ${locale}`}\r\n              onClick={() => dispatch(updateLocale(locale))}\r\n              title={intl.formatMessage({\r\n                id: `header.localeFlag.title.${locale}`\r\n              })}\r\n            >\r\n              <img\r\n                className=\"locale-flag\"\r\n                src={`ressources/images/${locale}.png`}\r\n                alt={locale}\r\n              />\r\n            </span>\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"logo-container\">\r\n          <Link to=\"/\">\r\n            <img\r\n              className=\"logo-img\"\r\n              src=\"https://fontmeme.com/permalink/210115/af584580b184245e64544f22a3a395df.png\"\r\n              border=\"0\"\r\n              alt={intl.formatMessage({ id: \"header.altLogo\" })}\r\n            />\r\n          </Link>\r\n        </div>\r\n\r\n        <div className=\"cart-container\">\r\n          <Popover\r\n            visible={isOpenPopoverCart}\r\n            content={\r\n              <CartPopover\r\n                handleClickSeeCart={() =>\r\n                  this.setState({ isOpenPopoverCart: false })\r\n                }\r\n              />\r\n            }\r\n            trigger=\"click\"\r\n            title={<FormattedMessage id=\"header.cartPopover.title\" />}\r\n            placement=\"bottomRight\"\r\n            onVisibleChange={(value) =>\r\n              this.setState({ isOpenPopoverCart: value })\r\n            }\r\n          >\r\n            <Button\r\n              className={`cart-button ${this.getClassNameShopCart(lastAction)}`}\r\n              type=\"link\"\r\n              onClick={() =>\r\n                this.setState({ isOpenPopoverCart: !isOpenPopoverCart })\r\n              }\r\n            >\r\n              <Badge\r\n                count={getTotalNbrOfItemsInCart(itemsInCart)}\r\n                size={screenSize === screenSizesEnum.XS ? \"small\" : \"default\"}\r\n              >\r\n                <img\r\n                  className=\"card-icon\"\r\n                  src=\"ressources/images/shopping-cart.png\"\r\n                  alt={intl.formatMessage({ id: \"header.altCartIcon\" })}\r\n                />\r\n              </Badge>\r\n            </Button>\r\n          </Popover>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nHeader.propTypes = {\r\n  dispatch: PropTypes.func,\r\n  itemsInCart: PropTypes.array,\r\n  lastAction: PropTypes.string,\r\n  screenSize: PropTypes.number\r\n};\r\n\r\nconst mapStateToProps = ({ cart, lastAction, app }) => ({\r\n  itemsInCart: cart.items,\r\n  lastAction: lastAction.type,\r\n  screenSize: app.screenSize\r\n});\r\n\r\nexport default connect(mapStateToProps)(injectIntl(Header));\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./styles.scss\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { Button, Rate } from \"antd\";\r\nimport { ZoomInOutlined } from \"@ant-design/icons\";\r\nimport Lightbox from \"react-image-lightbox\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Enums\r\nimport { componentsEnum } from \"enums\";\r\n\r\n// Helpers\r\nimport { checkIfItemIsAlreadyAdded, getItemByTitle } from \"helpers\";\r\n\r\n// Containers\r\nimport ManageItemQuantity from \"containers/ManageItemQuantity/ManageItemQuantity\";\r\n\r\nclass CardItem extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      canSeeMore: false,\r\n      isOpenCover: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { parent } = this.props;\r\n\r\n    // If this component is displayed in the ItemDetail component, the synopsis is fully displayed\r\n    if (parent === componentsEnum.ITEM_DETAIL) {\r\n      this.setState({ canSeeMore: true });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * To get the classname of parent div according to the parent component\r\n   */\r\n  getClassNameByParent() {\r\n    const { parent } = this.props;\r\n\r\n    switch (parent) {\r\n      case componentsEnum.HOME:\r\n        return \"cardItem-home-wrapper\";\r\n\r\n      case componentsEnum.ITEM_DETAIL:\r\n        return \"cardItem-itemDetail-wrapper\";\r\n\r\n      default:\r\n        return \"\";\r\n    }\r\n  }\r\n\r\n  /**\r\n   * To truncate the synopsis after 250 characters.\r\n   */\r\n  truncateSynopsis() {\r\n    const { canSeeMore } = this.state;\r\n    const { item } = this.props;\r\n\r\n    if (canSeeMore) {\r\n      return item.synopsis.join(\" \");\r\n    } else {\r\n      const text = item.synopsis[0];\r\n\r\n      if (text.length <= 250) {\r\n        return text;\r\n      }\r\n\r\n      const subString = text.substr(0, 250 - 1); // the original check\r\n      return subString.substr(0, subString.lastIndexOf(\" \")) + \" &hellip;\";\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { isOpenCover } = this.state;\r\n    const { item, itemsInCart, handleClickAddToCart, parent } = this.props;\r\n\r\n    return (\r\n      <div className={`CardItem-wrapper ${this.getClassNameByParent()}`}>\r\n        <Link to={`/detail/${item.isbn}`}>\r\n          <span className=\"cardItem-title\">{item.title}</span>\r\n        </Link>\r\n\r\n        <div className=\"text-container\">\r\n          <div\r\n            className=\"cover-container\"\r\n            onClick={() => this.setState({ isOpenCover: true })}\r\n          >\r\n            <img className=\"cardItem-cover\" src={item.cover} alt={item.title} />\r\n            <ZoomInOutlined className=\"icon-zoom\" />\r\n          </div>\r\n          <p className=\"cardItem-synopsis-container\">\r\n            <span\r\n              className=\"cardItem-synopsis\"\r\n              dangerouslySetInnerHTML={{ __html: this.truncateSynopsis() }}\r\n            />\r\n            {parent === componentsEnum.HOME && (\r\n              <React.Fragment>\r\n                <br />\r\n                <Link to={`/detail/${item.isbn}`}>\r\n                  <span className=\"see-more-synopsis\">\r\n                    <FormattedMessage id=\"cardItem.seeMore\" />\r\n                  </span>\r\n                </Link>\r\n              </React.Fragment>\r\n            )}\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"cardItem-footer\">\r\n          <div className=\"rate-container\">\r\n            <Rate\r\n              disabled\r\n              allowHalf\r\n              defaultValue={item.rate}\r\n              className=\"rate-card-item\"\r\n            />\r\n            <span>({item.comments})</span>\r\n          </div>\r\n\r\n          <div className=\"cardItem-price-container\">\r\n            <span className=\"cardItem-price\">{item.price} &euro;</span>\r\n\r\n            {checkIfItemIsAlreadyAdded(itemsInCart, item) ? (\r\n              <ManageItemQuantity\r\n                item={getItemByTitle(item.title, itemsInCart)}\r\n              />\r\n            ) : (\r\n              <Button onClick={handleClickAddToCart}>\r\n                <FormattedMessage id=\"cardItem.addToCartButton\" />\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {isOpenCover && (\r\n          <Lightbox\r\n            mainSrc={item.cover}\r\n            onCloseRequest={() => this.setState({ isOpenCover: false })}\r\n            imageTitle={item.title}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nCardItem.propTypes = {\r\n  item: PropTypes.object,\r\n  itemsInCart: PropTypes.array,\r\n  handleClickAddToCart: PropTypes.func,\r\n  parent: PropTypes.number\r\n};\r\n\r\nexport default CardItem;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./styles.scss\";\r\nimport { injectIntl } from \"react-intl\";\r\nimport { Input } from \"antd\";\r\n\r\nconst { Search } = Input;\r\n\r\nclass SearchForm extends Component {\r\n  /**\r\n   * To search the books corresponding to the value\r\n   * @param {String} value\r\n   */\r\n  handleSearch(value) {\r\n    const { items, getFilteredItems } = this.props;\r\n\r\n    const filteredItems = items.filter((element) =>\r\n      element.title.toLowerCase().includes(value.toLowerCase())\r\n    );\r\n\r\n    // Callback to send the filtered books in the store\r\n    getFilteredItems(filteredItems);\r\n  }\r\n\r\n  render() {\r\n    const { intl } = this.props;\r\n\r\n    return (\r\n      <Search\r\n        placeholder={intl.formatMessage({ id: \"searchForm.placeholder\" })}\r\n        allowClear\r\n        onSearch={(value) => this.handleSearch(value)}\r\n        onChange={(e) => this.handleSearch(e.target.value)}\r\n        style={{ width: 250 }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nSearchForm.propTypes = {\r\n  intl: PropTypes.object,\r\n  items: PropTypes.array,\r\n  getFilteredItems: PropTypes.func\r\n};\r\n\r\nexport default injectIntl(SearchForm);\r\n","import React from \"react\";\r\nimport \"./styles.scss\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nconst Loader = () => (\r\n  <div className=\"Loader-wrapper\">\r\n    <span className=\"loader-text\">\r\n      <FormattedMessage id=\"loader.text\" />\r\n    </span>\r\n    <div className=\"lds-ellipsis\">\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Loader;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./styles.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport { injectIntl, FormattedMessage } from \"react-intl\";\r\n\r\n// Enums\r\nimport { componentsEnum } from \"enums\";\r\n\r\n// Helpers\r\nimport { addAndUpdateItemToCart } from \"helpers\";\r\n\r\n// Actions\r\nimport { updateHomePosition } from \"store/actions\";\r\n\r\n// Components\r\nimport CardItem from \"components/CardItem/CardItem.js\";\r\nimport SearchForm from \"components/SearchForm/SearchForm\";\r\nimport Loader from \"components/Loader/Loader\";\r\n\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filteredItems: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { items, homePosition } = this.props;\r\n    // Init page position\r\n    window.scrollTo(homePosition.x, homePosition.y);\r\n    // Init the state\r\n    this.setState({ filteredItems: items });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { items } = this.props;\r\n    // If the length of defaults items changed\r\n    if (prevProps.items.length !== items.length) {\r\n      this.setState({ filteredItems: items });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { dispatch } = this.props;\r\n    dispatch(updateHomePosition(0, window.scrollY));\r\n  }\r\n\r\n  render() {\r\n    const { filteredItems } = this.state;\r\n    const { intl, dispatch, items, itemsInCart } = this.props;\r\n\r\n    return (\r\n      <div className=\"Home-wrapper\">\r\n        <p className=\"home-intro\" dangerouslySetInnerHTML={{ __html: intl.formatMessage({ id: \"home.intro\" }) }} />\r\n\r\n        <div className=\"title-container\">\r\n          <h2 className=\"header-title\">\r\n            <FormattedMessage id=\"home.bodyTitle\" />\r\n          </h2>\r\n\r\n          <SearchForm\r\n            items={items}\r\n            getFilteredItems={(filteredItems) =>\r\n              this.setState({ filteredItems })\r\n            }\r\n          />\r\n        </div>\r\n\r\n        <div className=\"home-container\">\r\n          {items.length\r\n            ? (filteredItems.map((item, index) => (\r\n              <CardItem\r\n                key={index}\r\n                item={item}\r\n                itemsInCart={itemsInCart}\r\n                handleClickAddToCart={() =>\r\n                  addAndUpdateItemToCart(dispatch, itemsInCart, item)\r\n                }\r\n                parent={componentsEnum.HOME}\r\n              />\r\n            )))\r\n            : <Loader />}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nHome.propTypes = {\r\n  intl: PropTypes.object,\r\n  dispatch: PropTypes.func,\r\n  items: PropTypes.array,\r\n  itemsInCart: PropTypes.array,\r\n  homePosition: PropTypes.object\r\n};\r\n\r\nconst mapStateToProps = ({ app, cart }) => ({\r\n  items: app.items,\r\n  itemsInCart: cart.items,\r\n  homePosition: app.homePosition\r\n});\r\n\r\nexport default connect(mapStateToProps)(injectIntl(Home));\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./styles.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { Button } from \"antd\";\r\nimport { LeftOutlined } from \"@ant-design/icons\";\r\n\r\n// Enums\r\nimport { componentsEnum } from \"enums\";\r\n\r\n// Helpers\r\nimport { addAndUpdateItemToCart } from \"helpers\";\r\n\r\n// Components\r\nimport CardItem from \"components/CardItem/CardItem\";\r\n\r\nclass ItemDetail extends Component {\r\n  componentDidMount() {\r\n    // Scroll to the top\r\n    window.scrollTo(0, 0);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      dispatch,\r\n      items,\r\n      itemsInCart,\r\n      match: { params }\r\n    } = this.props;\r\n    const { id } = params;\r\n\r\n    // Find the item in the store according to the id in the route\r\n    const item = items.find((element) => element.isbn === id);\r\n\r\n    if (item) {\r\n      return (\r\n        <div className=\"ItemDetail-wrapper\">\r\n          <Button\r\n            type=\"link\"\r\n            onClick={() => this.props.history.push(\"/\")}\r\n            icon={<LeftOutlined />}\r\n            className=\"button-back\"\r\n          >\r\n            <FormattedMessage id=\"itemDetail.backToHome\" />\r\n          </Button>\r\n\r\n          <CardItem\r\n            item={item}\r\n            itemsInCart={itemsInCart}\r\n            handleClickAddToCart={() =>\r\n              addAndUpdateItemToCart(dispatch, itemsInCart, item)\r\n            }\r\n            parent={componentsEnum.ITEM_DETAIL}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nItemDetail.propTypes = {\r\n  dispatch: PropTypes.func,\r\n  items: PropTypes.array,\r\n  itemsInCart: PropTypes.array,\r\n  handleClickAddToCart: PropTypes.func\r\n};\r\n\r\nconst mapStateToProps = ({ app, cart }) => ({\r\n  items: app.items,\r\n  itemsInCart: cart.items\r\n});\r\n\r\nexport default connect(mapStateToProps)(ItemDetail);\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./styles.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport { injectIntl, FormattedMessage } from \"react-intl\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Table, Button, Tooltip, Empty } from \"antd\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\n\r\n// Config\r\nimport config from \"config/config\";\r\n\r\n// Enums\r\nimport { screenSizesEnum } from \"enums\";\r\n\r\n// Helpers\r\nimport { getItemByTitle, calculateTotalWithoutOffer } from \"helpers\";\r\n\r\n// Actions\r\nimport { removeItemInCart } from \"store/actions\";\r\n\r\n// Containers\r\nimport ManageItemQuantity from \"containers/ManageItemQuantity/ManageItemQuantity\";\r\n\r\nclass CartItemsTable extends Component {\r\n  /**\r\n   * To remove an item category in the store\r\n   * @param {String} itemName\r\n   */\r\n  handleClickRemoveItem(itemName) {\r\n    const { dispatch, itemsInCart } = this.props;\r\n\r\n    // Search the index of the current item in the cart in the store\r\n    const index = itemsInCart.findIndex(\r\n      (element) => element.title === itemName\r\n    );\r\n    // Remove this item if it is find in the cart\r\n    if (index > -1) {\r\n      dispatch(removeItemInCart(index));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Configure the table columns\r\n   */\r\n  getColumns() {\r\n    const { intl, itemsInCart, screenSize } = this.props;\r\n\r\n    // If the screen size is mobile, there is just one column \"description\" that contains all informations\r\n    if (screenSize === screenSizesEnum.XS) {\r\n      return config.cartItemsTable.columns.mobile.map((columnTitle) => {\r\n        const column = {\r\n          title: \"\",\r\n          dataIndex: columnTitle,\r\n          key: columnTitle\r\n        };\r\n\r\n        switch (columnTitle) {\r\n          case \"description\":\r\n            column.render = (text, record) => this.getMobileDescription(record);\r\n            break;\r\n\r\n          default:\r\n            break;\r\n        }\r\n\r\n        return column;\r\n      });\r\n    } else {\r\n      return config.cartItemsTable.columns.desktop.map((columnTitle) => {\r\n        const title = intl.formatMessage({\r\n          id: `cartItemsTable.column.title.${columnTitle}`\r\n        });\r\n\r\n        const column = {\r\n          title,\r\n          dataIndex: columnTitle,\r\n          key: columnTitle\r\n        };\r\n\r\n        switch (columnTitle) {\r\n          case \"name\":\r\n            column.render = (text, record) => (\r\n              <Link to={`/detail/${record.id}`}>\r\n                <img\r\n                  className=\"img-name-table\"\r\n                  src={record.cover}\r\n                  alt={record.name}\r\n                />\r\n                <span>{text}</span>\r\n              </Link>\r\n            );\r\n            break;\r\n\r\n          case \"price\":\r\n            column.render = (text) => <span>{text}&euro;</span>;\r\n            break;\r\n\r\n          case \"quantity\":\r\n            column.render = (text, record) => {\r\n              return (\r\n                <ManageItemQuantity\r\n                  item={getItemByTitle(record.name, itemsInCart)}\r\n                />\r\n              );\r\n            };\r\n            break;\r\n\r\n          case \"actions\":\r\n            column.render = (text, record) => {\r\n              return (\r\n                <Tooltip\r\n                  title={intl.formatMessage({\r\n                    id: \"cartItemsTable.deleteItem.tooltip\"\r\n                  })}\r\n                  placement=\"bottomRight\"\r\n                >\r\n                  <Button\r\n                    type=\"primary\"\r\n                    danger\r\n                    className=\"delete-item-button\"\r\n                    onClick={() => this.handleClickRemoveItem(record.name)}\r\n                  >\r\n                    <DeleteOutlined />\r\n                  </Button>\r\n                </Tooltip>\r\n              );\r\n            };\r\n            break;\r\n\r\n          default:\r\n            break;\r\n        }\r\n\r\n        return column;\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * To render the description column in mobile mode\r\n   * @param {Object} item\r\n   */\r\n  getMobileDescription(item) {\r\n    const { itemsInCart, intl } = this.props;\r\n\r\n    return (\r\n      <div className=\"mobile-description-wrapper\">\r\n        <div className=\"mobile-cover-container\">\r\n          <Link to={`/detail/${item.id}`}>\r\n            <img className=\"img-name-table\" src={item.cover} alt={item.name} />\r\n          </Link>\r\n        </div>\r\n\r\n        <div className=\"mobile-description-container\">\r\n          <span className=\"mobile-description-title\">{item.name}</span>\r\n          <span className=\"mobile-description-price\">\r\n            {item.quantity} x {item.price}&euro;\r\n          </span>\r\n          <div className=\"quantity-actions-container\">\r\n            <ManageItemQuantity item={getItemByTitle(item.name, itemsInCart)} />\r\n            <Tooltip\r\n              title={intl.formatMessage({\r\n                id: \"cartItemsTable.deleteItem.tooltip\"\r\n              })}\r\n              placement=\"bottomRight\"\r\n            >\r\n              <Button\r\n                type=\"primary\"\r\n                danger\r\n                className=\"delete-item-button\"\r\n                onClick={() => this.handleClickRemoveItem(item.name)}\r\n                size=\"small\"\r\n              >\r\n                <DeleteOutlined />\r\n              </Button>\r\n            </Tooltip>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * To format the datasource in the table\r\n   */\r\n  getDataSource() {\r\n    const { itemsInCart } = this.props;\r\n\r\n    return itemsInCart.map((item, index) => ({\r\n      key: index,\r\n      name: item.title,\r\n      price: item.price,\r\n      quantity: item.quantity,\r\n      id: item.isbn,\r\n      cover: item.cover\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * To render the table footer that contains the prices and the offer\r\n   */\r\n  getTableFooter() {\r\n    const { cartTotal, applicatedOffer, itemsInCart } = this.props;\r\n\r\n    return (\r\n      <div className=\"footer-table\">\r\n        <div className=\"subtotal-container\">\r\n          <span className=\"subtotal-label\">\r\n            <FormattedMessage id=\"cartItemsTable.tableFooter.subtotal\" />\r\n            &nbsp;:&nbsp;\r\n          </span>\r\n          <span>{calculateTotalWithoutOffer(itemsInCart)}</span>\r\n        </div>\r\n        <div className=\"offer-container\">\r\n          <span className=\"offer-label\">\r\n            <FormattedMessage id=\"cartItemsTable.tableFooter.offers\" />\r\n            &nbsp;:&nbsp;\r\n          </span>\r\n          <span>{this.getApplicatedOfferText(applicatedOffer)}</span>\r\n        </div>\r\n        <div className=\"total-container\">\r\n          <span>Total : </span>\r\n          <span>{cartTotal}&euro;</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * To format the display of the offer in the table footer\r\n   * @param {Object} applicatedOffer\r\n   */\r\n  getApplicatedOfferText(applicatedOffer) {\r\n    const { intl } = this.props;\r\n\r\n    if (!applicatedOffer) {\r\n      return intl.formatMessage({ id: \"cartItemsTable.applicatedOffer.any\" });\r\n    }\r\n\r\n    switch (applicatedOffer.type) {\r\n      case \"percentage\":\r\n        return <span>{applicatedOffer.value}&#37;</span>;\r\n      case \"minus\":\r\n        return <span>-{applicatedOffer.value}&euro;</span>;\r\n      case \"slice\":\r\n        return (\r\n          <span>\r\n            <FormattedMessage\r\n              id=\"cartItemsTable.applicatedOffer.slice\"\r\n              values={{\r\n                sliceValue: applicatedOffer.sliceValue,\r\n                value: applicatedOffer.value\r\n              }}\r\n            />\r\n          </span>\r\n        );\r\n      default:\r\n        return \"\";\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"cartItemsTable-wrapper\">\r\n        <Table\r\n          columns={this.getColumns()}\r\n          dataSource={this.getDataSource()}\r\n          pagination={false}\r\n          footer={() => this.getTableFooter()}\r\n          locale={{\r\n            filterConfirm: \"Ok\",\r\n            filterReset: \"Reset\",\r\n            emptyText: (\r\n              <Empty\r\n                description={<FormattedMessage id=\"cartPopover.emptyCart\" />}\r\n                image={Empty.PRESENTED_IMAGE_SIMPLE}\r\n              />\r\n            )\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nCartItemsTable.propTypes = {\r\n  dispatch: PropTypes.func,\r\n  intl: PropTypes.object,\r\n  itemsInCart: PropTypes.array,\r\n  cartTotal: PropTypes.number,\r\n  screenSize: PropTypes.number\r\n};\r\n\r\nconst mapStateToProps = ({ cart, app }) => ({\r\n  itemsInCart: cart.items,\r\n  cartTotal: cart.total,\r\n  applicatedOffer: cart.applicatedOffer,\r\n  screenSize: app.screenSize\r\n});\r\n\r\nexport default connect(mapStateToProps)(injectIntl(CartItemsTable));\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { injectIntl, FormattedMessage } from \"react-intl\";\r\nimport { Button, message } from \"antd\";\r\n\r\n// Enums\r\nimport { screenSizesEnum } from \"enums\";\r\n\r\n// Actions\r\nimport { resetCart } from \"store/actions\";\r\n\r\n// Containers\r\nimport CartItemsTable from \"containers/CartItemsTable/CartItemsTable\";\r\n\r\nclass Cart extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      validatedCommand: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { itemsInCart } = this.props;\r\n\r\n    if (itemsInCart.length <= 0) {\r\n      this.setState({ validatedCommand: true });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { validatedCommand } = this.state;\r\n    const { itemsInCart } = this.props;\r\n\r\n    if (\r\n      prevProps.itemsInCart !== itemsInCart &&\r\n      itemsInCart.length <= 0 &&\r\n      !validatedCommand\r\n    ) {\r\n      this.setState({ validatedCommand: true });\r\n    } else if (\r\n      prevProps.itemsInCart !== itemsInCart &&\r\n      itemsInCart.length > 0 &&\r\n      validatedCommand\r\n    ) {\r\n      this.setState({ validatedCommand: false });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * To validate the cart when the validate button is clicked\r\n   */\r\n  handleClickValidate() {\r\n    const { intl, history, dispatch } = this.props;\r\n\r\n    this.setState({ validatedCommand: true });\r\n\r\n    // Display a first loading message\r\n    message\r\n      .loading(\r\n        intl.formatMessage({ id: \"cart.modalConfirmCommand.title.load\" }),\r\n        2\r\n      )\r\n      .then(() => {\r\n        // Display a success message that confirm the command\r\n        message\r\n          .success(\r\n            intl.formatMessage({\r\n              id: \"cart.modalConfirmCommand.title.validated\"\r\n            }),\r\n            2\r\n          )\r\n          .then(() => {\r\n            // Redirect to the home page\r\n            history.push(\"/\");\r\n            // Empty the cart in the store\r\n            dispatch(resetCart());\r\n          });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { validatedCommand } = this.state;\r\n    const { screenSize } = this.props;\r\n\r\n    return (\r\n      <div className=\"Cart-wrapper\">\r\n        <h2 className=\"cart-title\">\r\n          <FormattedMessage id=\"cart.title\" />\r\n        </h2>\r\n\r\n        <CartItemsTable />\r\n\r\n        <Button\r\n          size={screenSize === screenSizesEnum.XS ? \"middle\" : \"large\"}\r\n          disabled={validatedCommand}\r\n          onClick={() => this.handleClickValidate()}\r\n        >\r\n          <FormattedMessage id=\"cart.confirmCommand\" />\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nCart.propTypes = {\r\n  intl: PropTypes.object,\r\n  dispatch: PropTypes.func,\r\n  itemsInCart: PropTypes.array,\r\n  screenSize: PropTypes.number\r\n};\r\n\r\nconst mapStateToProps = ({ cart, app }) => ({\r\n  itemsInCart: cart.items,\r\n  screenSize: app.screenSize\r\n});\r\n\r\nexport default connect(mapStateToProps)(injectIntl(withRouter(Cart)));\r\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./App.scss\";\nimport { connect } from \"react-redux\";\nimport { injectIntl } from \"react-intl\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { message } from \"antd\";\n\n// Config\nimport config from \"config/config\";\n\n// Enums\nimport { screenSizesEnum } from \"enums\";\n\n// Helpers\nimport { addCartInLocalStorage } from \"helpers\";\n\n// Actions\nimport {\n  addAllBooks,\n  injectCart,\n  updateLocale,\n  updateScreenSize\n} from \"store/actions\";\n\n// Containers\nimport Header from \"containers/Header/Header.js\";\nimport Home from \"containers/Home/Home.js\";\nimport ItemDetail from \"containers/ItemDetail/ItemDetail\";\nimport Cart from \"containers/Cart/Cart.js\";\n\nclass App extends Component {\n  componentDidMount() {\n    const { dispatch } = this.props;\n\n    // Add event to detect when the window is resized\n    window.addEventListener(\"resize\", () => this.getScreenSize());\n\n    // To get the window size\n    this.getScreenSize();\n\n    // Set the locale\n    dispatch(updateLocale(navigator.language || \"fr-FR\"));\n\n    // Get all the books and add it in the store\n    axios\n      .get(\"https://henri-potier.techx.fr/books\")\n      .then(async (res) => {\n        const items = await res.data.map((item) => ({\n          ...item,\n          rate: Math.random() * (6 - 3) + 3,\n          comments: Math.ceil(Math.random() * (31 - 5) + 5)\n        }));\n        dispatch(addAllBooks(items));\n      })\n      .catch((err) => console.error(err));\n\n    // Get the cart in the localStorage\n    const storageCart = localStorage.getItem(\"cart\");\n\n    // If there is a cart in the localStorage, add it in the store\n    if (storageCart && JSON.parse(storageCart).length) {\n      dispatch(injectCart(JSON.parse(storageCart)));\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { locale, intl } = this.props;\n\n    if (prevProps.locale !== locale) {\n      message.info(intl.formatMessage({ id: \"header.changeLocale\" }));\n    }\n  }\n\n  componentWillUnmount() {\n    const { itemsInCart } = this.props;\n    // Add the current cart in the localStorage when the application is closing\n    addCartInLocalStorage(itemsInCart);\n  }\n\n  getScreenSize() {\n    const { dispatch, screenSize } = this.props;\n\n    if (\n      window.innerWidth < config.app.responsiveSizes.s &&\n      screenSize !== screenSizesEnum.XS\n    ) {\n      dispatch(updateScreenSize(screenSizesEnum.XS));\n    } else if (\n      window.innerWidth > config.app.responsiveSizes.s &&\n      screenSize !== screenSizesEnum.S\n    ) {\n      dispatch(updateScreenSize(screenSizesEnum.S));\n    } else if (\n      window.innerWidth > config.app.responsiveSizes.m &&\n      screenSize !== screenSizesEnum.M\n    ) {\n      dispatch(updateScreenSize(screenSizesEnum.M));\n    }\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Header />\n\n          <div className=\"app-body\">\n            <Switch>\n              <Route\n                path=\"/detail/:id\"\n                render={(props) => <ItemDetail {...props} />}\n              />\n              <Route path=\"/cart\">\n                <Cart />\n              </Route>\n              <Route path=\"/\">\n                <Home />\n              </Route>\n            </Switch>\n\n            <p className=\"copyright\">&copy; Thomas Bulle</p>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nApp.propTypes = {\n  dispatch: PropTypes.func,\n  intl: PropTypes.object,\n  itemsInCart: PropTypes.array,\n  screenSize: PropTypes.number,\n  locale: PropTypes.string\n};\n\nconst mapStateToProps = ({ cart, app }) => ({\n  itemsInCart: cart.items,\n  screenSize: app.screenSize,\n  locale: app.locale\n});\n\nexport default connect(mapStateToProps)(injectIntl(App));\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport \"antd/dist/antd.css\";\nimport \"react-image-lightbox/style.css\";\n\n// Intl\nimport IntlProviderWrapper from \"./IntlProviderWrapper\";\n\n// Redux\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport allReducers from \"store/reducers\";\nimport listener from \"store/listener\";\n\n// Components\nimport App from \"./App\";\n\nconst store = createStore(\n  allReducers,\n  window.__REDUX_DEVTOOLS_EXTENSION__\n    ? window.__REDUX_DEVTOOLS_EXTENSION__()\n    : (f) => f\n);\n\n// Listener\nstore.subscribe(() => listener(store));\n\nReactDOM.render(\n  <Provider store={store}>\n    <IntlProviderWrapper>\n      <App />\n    </IntlProviderWrapper>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}